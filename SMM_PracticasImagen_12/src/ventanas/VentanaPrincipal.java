/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import SM.PCS.Graficos.Herramienta;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.event.FocusEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.EqualizationOp;
import sm.image.ImageTools;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.SepiaOp;
import sm.image.TintOp;
import sm.pcs.imagen.PosterizarOp;
import sm.pcs.imagen.RojoOp;

/**
 *
 * @author pabloc
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaInterna
     */
    
    private Herramienta herramientaActual;
    private BufferedImage imagenOriginal;
    private Point puntero;
    private boolean rellenoSelected, transparenciaSelected, alisarSelected, seleccionarSelected;
    private boolean girado; //Para saber si hay que guardar con formato PNG para que no haya error
    
    public VentanaPrincipal() {
        initComponents();
        this.puntero = new Point(0,0);
        this.herramientaActual = Herramienta.LAPIZ;
        this.coordenadasPuntero.setText("Coordenadas del puntero: (" + this.puntero.x + ", " + this.puntero.y + ")");
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + Herramienta.LAPIZ); // Por defecto el l√°piz al principio
        //this.deslizador = new JSlider();
        this.brilloSlider.setValue(50);
        System.out.println("deslizador: " + this.brilloSlider.getValue());
        
        rellenoSelected = transparenciaSelected = alisarSelected = seleccionarSelected = false;
        
        girado = false;
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        barraFormas = new javax.swing.JToolBar();
        nuevo = new javax.swing.JButton();
        abrir = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        botonLapiz = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonOvalo = new javax.swing.JToggleButton();
        botonPera = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        Color colores[] = {Color.BLACK, Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW, Color.WHITE};
        listaColores = new javax.swing.JComboBox<>(colores);
        rellenar = new javax.swing.JToggleButton();
        transparencia = new javax.swing.JToggleButton();
        alisar = new javax.swing.JToggleButton();
        editar = new javax.swing.JToggleButton();
        botonGrosor = new javax.swing.JSpinner();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        listaFiltros = new javax.swing.JComboBox<>();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        escalaMas = new javax.swing.JButton();
        escalaMenos = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        rotacion90 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        rotacionSlider = new javax.swing.JSlider();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        extraerBandas = new javax.swing.JButton();
        colorSpace = new javax.swing.JComboBox<>();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        brilloSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        String contrastes[] = {"0", "1", "2"};
        listaContrastes = new javax.swing.JComboBox<>(contrastes);
        barraAtributos = new javax.swing.JPanel();
        barraEstado = new javax.swing.JPanel();
        etiquetaHerramientaActual = new javax.swing.JLabel();
        coordenadasPuntero = new javax.swing.JLabel();
        cuadratica = new javax.swing.JButton();
        mCuadSlider = new javax.swing.JSlider();
        mediaColores = new javax.swing.JButton();
        botonTintado = new javax.swing.JButton();
        botonSepia = new javax.swing.JButton();
        botonEcualizar = new javax.swing.JButton();
        NColoresSlider = new javax.swing.JSlider();
        botonRojo = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        tintadoSlider = new javax.swing.JSlider();
        umbralRojoSlider = new javax.swing.JSlider();
        PanelCentral = new javax.swing.JPanel();
        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        nuevaVentana = new javax.swing.JMenuItem();
        abrirDibujo = new javax.swing.JMenuItem();
        guardarDibujo = new javax.swing.JMenuItem();
        edicion = new javax.swing.JMenu();
        verBarraEstado = new javax.swing.JCheckBoxMenuItem();
        verBarraAtributos = new javax.swing.JCheckBoxMenuItem();
        verBarraFormas = new javax.swing.JCheckBoxMenuItem();
        imagen = new javax.swing.JMenu();
        rescaleOp = new javax.swing.JMenuItem();
        convolveOp = new javax.swing.JMenuItem();
        affineTransform = new javax.swing.JMenuItem();
        lookupOp = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        duplicar = new javax.swing.JMenuItem();
        bandCombineOp = new javax.swing.JMenuItem();
        colorConvertOp = new javax.swing.JMenuItem();
        posterizarOp = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraFormas.setRollover(true);

        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevo.setFocusable(false);
        nuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        barraFormas.add(nuevo);

        abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrir.setFocusable(false);
        abrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        barraFormas.add(abrir);

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardar.setFocusable(false);
        guardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        barraFormas.add(guardar);
        barraFormas.add(jSeparator1);

        botonLapiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        botonLapiz.setFocusable(false);
        botonLapiz.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLapiz.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLapiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLapizActionPerformed(evt);
            }
        });
        barraFormas.add(botonLapiz);

        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });
        barraFormas.add(botonLinea);

        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloActionPerformed(evt);
            }
        });
        barraFormas.add(botonRectangulo);

        botonOvalo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        botonOvalo.setFocusable(false);
        botonOvalo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonOvalo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonOvalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOvaloActionPerformed(evt);
            }
        });
        barraFormas.add(botonOvalo);

        botonPera.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pera.png"))); // NOI18N
        botonPera.setFocusable(false);
        botonPera.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPera.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPeraActionPerformed(evt);
            }
        });
        barraFormas.add(botonPera);
        barraFormas.add(jSeparator2);

        listaColores.setMaximumSize(new java.awt.Dimension(64, 23));
        listaColores.setRenderer(new ColorCellRender());
        listaColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaColoresActionPerformed(evt);
            }
        });
        barraFormas.add(listaColores);

        rellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        rellenar.setFocusable(false);
        rellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenarActionPerformed(evt);
            }
        });
        barraFormas.add(rellenar);

        transparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        transparencia.setFocusable(false);
        transparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparenciaActionPerformed(evt);
            }
        });
        barraFormas.add(transparencia);

        alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisar.setFocusable(false);
        alisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisarActionPerformed(evt);
            }
        });
        barraFormas.add(alisar);

        editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        editar.setFocusable(false);
        editar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });
        barraFormas.add(editar);

        botonGrosor.setMaximumSize(new java.awt.Dimension(27, 18));
        botonGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                botonGrosorStateChanged(evt);
            }
        });
        botonGrosor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonGrosorMouseClicked(evt);
            }
        });
        barraFormas.add(botonGrosor);
        barraFormas.add(jSeparator3);

        listaFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplace" }));
        listaFiltros.setMaximumSize(new java.awt.Dimension(77, 23));
        listaFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaFiltrosActionPerformed(evt);
            }
        });
        barraFormas.add(listaFiltros);
        barraFormas.add(jSeparator5);

        escalaMas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_add_circle_outline_black_18dp.png"))); // NOI18N
        escalaMas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escalaMasActionPerformed(evt);
            }
        });
        barraFormas.add(escalaMas);

        escalaMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_remove_circle_outline_black_18dp.png"))); // NOI18N
        escalaMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                escalaMenosActionPerformed(evt);
            }
        });
        barraFormas.add(escalaMenos);

        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        barraFormas.add(jButton1);

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        rotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90ActionPerformed(evt);
            }
        });
        barraFormas.add(rotacion90);

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });
        barraFormas.add(rotacion180);

        rotacionSlider.setMaximumSize(new java.awt.Dimension(50, 16));
        rotacionSlider.setPreferredSize(new java.awt.Dimension(80, 16));
        rotacionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotacionSliderStateChanged(evt);
            }
        });
        rotacionSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusLost(evt);
            }
        });
        barraFormas.add(rotacionSlider);
        barraFormas.add(jSeparator4);

        extraerBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        extraerBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraerBandasActionPerformed(evt);
            }
        });
        barraFormas.add(extraerBandas);

        colorSpace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        colorSpace.setMaximumSize(new java.awt.Dimension(32, 23));
        colorSpace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorSpaceActionPerformed(evt);
            }
        });
        barraFormas.add(colorSpace);
        barraFormas.add(jSeparator6);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_brightness_high_black_18dp.png"))); // NOI18N
        barraFormas.add(jLabel2);

        brilloSlider.setMaximumSize(new java.awt.Dimension(50, 16));
        brilloSlider.setPreferredSize(new java.awt.Dimension(80, 16));
        brilloSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloSliderStateChanged(evt);
            }
        });
        brilloSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloSliderFocusLost(evt);
            }
        });
        barraFormas.add(brilloSlider);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_brightness_low_black_18dp.png"))); // NOI18N
        barraFormas.add(jLabel4);

        listaContrastes.setMaximumSize(new java.awt.Dimension(32, 23));
        listaContrastes.setRenderer(new ContrasteCellRender());
        listaContrastes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaContrastesActionPerformed(evt);
            }
        });
        barraFormas.add(listaContrastes);

        getContentPane().add(barraFormas, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout barraEstadoLayout = new javax.swing.GroupLayout(barraEstado);
        barraEstado.setLayout(barraEstadoLayout);
        barraEstadoLayout.setHorizontalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barraEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(etiquetaHerramientaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coordenadasPuntero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        barraEstadoLayout.setVerticalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(etiquetaHerramientaActual, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .addComponent(coordenadasPuntero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        cuadratica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/cuadratica.png"))); // NOI18N
        cuadratica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cuadraticaActionPerformed(evt);
            }
        });

        mCuadSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mCuadSliderStateChanged(evt);
            }
        });
        mCuadSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mCuadSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                mCuadSliderFocusLost(evt);
            }
        });

        mediaColores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/combinar.png"))); // NOI18N
        mediaColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaColoresActionPerformed(evt);
            }
        });

        botonTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        botonTintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTintadoActionPerformed(evt);
            }
        });

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        botonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSepiaActionPerformed(evt);
            }
        });

        botonEcualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        botonEcualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEcualizarActionPerformed(evt);
            }
        });

        NColoresSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                NColoresSliderStateChanged(evt);
            }
        });
        NColoresSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                NColoresSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                NColoresSliderFocusLost(evt);
            }
        });

        botonRojo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rojo.png"))); // NOI18N
        botonRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRojoActionPerformed(evt);
            }
        });

        jLabel7.setText("Posterizar:");

        tintadoSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tintadoSliderStateChanged(evt);
            }
        });
        tintadoSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tintadoSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tintadoSliderFocusLost(evt);
            }
        });

        umbralRojoSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                umbralRojoSliderStateChanged(evt);
            }
        });
        umbralRojoSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                umbralRojoSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                umbralRojoSliderFocusLost(evt);
            }
        });

        javax.swing.GroupLayout barraAtributosLayout = new javax.swing.GroupLayout(barraAtributos);
        barraAtributos.setLayout(barraAtributosLayout);
        barraAtributosLayout.setHorizontalGroup(
            barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(barraEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(barraAtributosLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mCuadSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                    .addComponent(cuadratica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(33, 33, 33)
                .addComponent(mediaColores, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tintadoSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(botonTintado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(75, 75, 75)
                .addComponent(botonSepia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonEcualizar)
                .addGap(38, 38, 38)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(umbralRojoSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                    .addComponent(botonRojo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(49, 49, 49)
                .addComponent(jLabel7)
                .addGap(1, 1, 1)
                .addComponent(NColoresSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 803, Short.MAX_VALUE))
        );
        barraAtributosLayout.setVerticalGroup(
            barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barraAtributosLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(barraAtributosLayout.createSequentialGroup()
                        .addComponent(umbralRojoSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonRojo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(barraAtributosLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mCuadSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tintadoSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonSepia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                            .addComponent(mediaColores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cuadratica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonTintado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(botonEcualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(barraAtributosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(NColoresSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(8, 8, 8)
                .addComponent(barraEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(barraAtributos, java.awt.BorderLayout.PAGE_END);

        PanelCentral.setLayout(new java.awt.BorderLayout());

        escritorio.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                escritorioMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1651, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 621, Short.MAX_VALUE)
        );

        PanelCentral.add(escritorio, java.awt.BorderLayout.CENTER);

        getContentPane().add(PanelCentral, java.awt.BorderLayout.CENTER);

        archivo.setText("Archivo");

        nuevaVentana.setText("Nuevo");
        nuevaVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaVentanaActionPerformed(evt);
            }
        });
        archivo.add(nuevaVentana);

        abrirDibujo.setText("Abrir...");
        abrirDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirDibujoActionPerformed(evt);
            }
        });
        archivo.add(abrirDibujo);

        guardarDibujo.setText("Guardar como...");
        guardarDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarDibujoActionPerformed(evt);
            }
        });
        archivo.add(guardarDibujo);

        jMenuBar1.add(archivo);

        edicion.setText("Edicion");

        verBarraEstado.setSelected(true);
        verBarraEstado.setText("Ver barra de estado");
        verBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraEstadoActionPerformed(evt);
            }
        });
        edicion.add(verBarraEstado);

        verBarraAtributos.setSelected(true);
        verBarraAtributos.setText("Ver barra de atributos");
        verBarraAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraAtributosActionPerformed(evt);
            }
        });
        edicion.add(verBarraAtributos);

        verBarraFormas.setSelected(true);
        verBarraFormas.setText("Ver barra de formas");
        verBarraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraFormasActionPerformed(evt);
            }
        });
        edicion.add(verBarraFormas);

        jMenuBar1.add(edicion);

        imagen.setText("Imagen");

        rescaleOp.setText("RescaleOp");
        rescaleOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rescaleOpActionPerformed(evt);
            }
        });
        imagen.add(rescaleOp);

        convolveOp.setText("ConvolveOp");
        convolveOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolveOpActionPerformed(evt);
            }
        });
        imagen.add(convolveOp);

        affineTransform.setText("AffineTransformOp");
        affineTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                affineTransformActionPerformed(evt);
            }
        });
        imagen.add(affineTransform);

        lookupOp.setText("LookupOp");
        lookupOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lookupOpActionPerformed(evt);
            }
        });
        imagen.add(lookupOp);

        jMenuItem4.setText("BandCombineOp");
        imagen.add(jMenuItem4);

        jMenuItem5.setText("ColorConvertOp");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        imagen.add(jMenuItem5);

        duplicar.setText("Duplicar");
        duplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarActionPerformed(evt);
            }
        });
        imagen.add(duplicar);

        bandCombineOp.setText("BandCombineOp");
        bandCombineOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandCombineOpActionPerformed(evt);
            }
        });
        imagen.add(bandCombineOp);

        colorConvertOp.setText("ColorConvertOp");
        colorConvertOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorConvertOpActionPerformed(evt);
            }
        });
        imagen.add(colorConvertOp);

        posterizarOp.setText("PosterizarOp");
        posterizarOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posterizarOpActionPerformed(evt);
            }
        });
        imagen.add(posterizarOp);

        jMenuBar1.add(imagen);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void nuevaVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaVentanaActionPerformed
        //Creamos nueva ventana interna
        VentanaInterna vi = new VentanaInterna();
        this.escritorio.add(vi);
        
        vi.addInternalFrameListener(new ManejadorVentanaInterna());
        vi.getLienzo2D().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent me) {
                puntero.x = me.getX();
                puntero.y = me.getY();
                int rgb, R,G,B;
                rgb = vi.getLienzo2D().getFondo().getRGB(puntero.x, puntero.y);
                R = (rgb >> 16) & 0xFF;
                G = (rgb >> 8) & 0xFF;
                B = rgb & 0xFF;
                
                coordenadasPuntero.setText("Coordenadas del puntero: (" + puntero.x + ", " + puntero.y + ") = ["+ R + "," + G + "," + B + "]");
            }
        });
            

        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        Graphics g = img.getGraphics();
        //vi.getLienzo2D().setFondo(img);
        vi.getLienzo2D().paint(g); //Llamar a que dibuje como paint pero un rect√°ngulo blanco
        //this.setOpcionesDefault();
        vi.setVisible(true);
    }//GEN-LAST:event_nuevaVentanaActionPerformed

    private void guardarDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarDibujoActionPerformed
        VentanaInterna vi  = (VentanaInterna) this.escritorio.getSelectedFrame();
        FileFilter filter = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg");
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo(true); //true --> Guardamos las figuras dibujadas sobre la imagen
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                dlg.addChoosableFileFilter(filter);
                
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try{
                        File f = dlg.getSelectedFile();
                        String extension = getExtension(f.getName());
                        
                        
                        if (vi.isGirado()) { //Si hemos girado la imagen, autom√°ticamente la guardamos como png para que no haya error
                            ImageIO.write(img, "png", f); //Independientemente de si hab√≠amos escrito el formato o no
                        }
                        else if (extension == null) { //Si no escribimos ning√∫n formato, por defecto se guarda como jpg
                            ImageIO.write(img, "jpg", f);
                        }
                        else { //En otro caso, guardamos en el formato que indiquemos en el nombre (jpg o png)
                            ImageIO.write(img, extension, f);
                        }
                        
                       vi.setTitle(f.getName());
                    }
                    catch (Exception e) {
                        JDialog aviso = new JDialog();
                        aviso.setTitle("ERROR AL GUARDAR");
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_guardarDibujoActionPerformed

    private String getExtension(String nombreArchivo) {        
        if (nombreArchivo.endsWith(".jpg")){
            System.out.println("Detectada extensi√≥n jpg");
            return "jpg";
        }
        else if (nombreArchivo.endsWith(".png")) {
            System.out.println("Detectada extensi√≥n png");
            return "png";
        }
        else if (nombreArchivo.endsWith(".tiff")) {
            System.out.println("Detectada extensi√≥n tiff");
            return "tiff";
        }
            
        return null;
    }
            
            
    private void botonLapizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLapizActionPerformed
        this.botonLapiz.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.LAPIZ);
        
        this.botonLinea.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonOvalo.setSelected(false);
        this.botonPera.setSelected(false);
        
        this.herramientaActual = Herramienta.LAPIZ;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonLapizActionPerformed

    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        this.botonLinea.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.LINEA);
        
        this.botonLapiz.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonOvalo.setSelected(false);
        this.botonPera.setSelected(false);
        
        this.herramientaActual = Herramienta.LINEA;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonLineaActionPerformed

    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        this.botonRectangulo.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.RECTANGULO);
        
        this.botonLapiz.setSelected(false);
        this.botonLinea.setSelected(false);
        this.botonOvalo.setSelected(false);
        this.botonPera.setSelected(false);
        
        this.herramientaActual = Herramienta.RECTANGULO;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonRectanguloActionPerformed

    private void botonOvaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOvaloActionPerformed
        this.botonOvalo.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.OVALO);
        
        this.botonLapiz.setSelected(false);
        this.botonLinea.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonPera.setSelected(false);
        
        this.herramientaActual = Herramienta.OVALO;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonOvaloActionPerformed

    private void botonPeraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPeraActionPerformed
        this.botonPera.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.PERA);
        
        this.botonLapiz.setSelected(false);
        this.botonLinea.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonOvalo.setSelected(false);
        
        this.herramientaActual = Herramienta.PERA;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonPeraActionPerformed

    private void setOpcionesDefault() {
        //Por defecto comenzamos con la herramienta del l√°piz activada y el grosor a 1
        this.botonLapiz.setSelected(true);       
        this.botonLinea.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonOvalo.setSelected(false);
        this.botonPera.setSelected(false);
        this.herramientaActual = Herramienta.LAPIZ;

        this.botonGrosor.setValue(1);
    }
    
    private void botonGrosorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGrosorMouseClicked
        //System.out.println("Grosor modificado");
    }//GEN-LAST:event_botonGrosorMouseClicked

    private void botonGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_botonGrosorStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setGrosor((int)this.botonGrosor.getValue());
        vi.getLienzo2D().setAtributos();
        System.out.println("Grosor: " + this.botonGrosor.getValue());
    }//GEN-LAST:event_botonGrosorStateChanged

    private void abrirDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirDibujoActionPerformed
        JFileChooser dlg = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg", "png");
        dlg.addChoosableFileFilter(filter);
        int resp = dlg.showOpenDialog(this);
        
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                
                
                //Creo una imagen con canal alfa con las dimensiones de las que he elegido
                //BufferedImage imgAlfa = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
                BufferedImage imgAlfa = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_RGB);

                Graphics g = imgAlfa.getGraphics();
                
                VentanaInterna vi = new VentanaInterna();
                this.escritorio.add(vi);
                vi.setVisible(true);
                vi.addInternalFrameListener(new ManejadorVentanaInterna());
                vi.getLienzo2D().setFondo(img);
                vi.setTitle(f.getName());
                this.setOpcionesDefault();
                
                vi.getLienzo2D().paint(g);
                
                vi.getLienzo2D().addMouseMotionListener(new MouseMotionAdapter() {
                    @Override
                    public void mouseMoved(MouseEvent me) {
                        puntero.x = me.getX();
                        puntero.y = me.getY();
                        int rgb, R,G,B;
                        //Si el puntero se sale de la imagen pero est√° dentro del lienzo
                        if (puntero.x < vi.getLienzo2D().getFondo().getWidth() && puntero.y < vi.getLienzo2D().getFondo().getHeight()) {
                            rgb = vi.getLienzo2D().getFondo().getRGB(puntero.x, puntero.y);
                            R = (rgb >> 16) & 0xFF;
                            G = (rgb >> 8) & 0xFF;
                            B = rgb & 0xFF;
                        }
                        else {
                            R = G = B = -1; //Valor imposible: significa que est√° fuera de la imagen
                        }

                        coordenadasPuntero.setText("Coordenadas del puntero: (" + puntero.x + ", " + puntero.y + ") = ["+ R + "," + G + "," + B + "]");
                    }
                });
            }
            catch(Exception e) {
                //Creamos una ventana de di√°logo  donde indicamos el error
                JDialog aviso = new JDialog(new JFrame(),"ERROR AL ABRIR");
                JLabel l = new JLabel("El archivo seleccionado no es v√°lido.");
                aviso.add(l);
                aviso.setSize(500, 200);
                aviso.setVisible(true);
                System.err.println("Error al leer la imagen");
                System.err.println(e.getLocalizedMessage());
            }
        }
        
    }//GEN-LAST:event_abrirDibujoActionPerformed

    private void verBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraEstadoActionPerformed
        this.barraEstado.setVisible(this.verBarraEstado.isSelected());
    }//GEN-LAST:event_verBarraEstadoActionPerformed

    private void verBarraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraAtributosActionPerformed
        this.barraAtributos.setVisible(this.verBarraAtributos.isSelected());
    }//GEN-LAST:event_verBarraAtributosActionPerformed

    private void verBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraFormasActionPerformed
        this.barraFormas.setVisible(this.verBarraFormas.isSelected());
    }//GEN-LAST:event_verBarraFormasActionPerformed

    private void rescaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rescaleOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
//        if (vi != null) {
//            BufferedImage img = vi.getLienzo2D().getFondo(false);
//            if (img != null) {
//                try {
//                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null); //(contraste, brillo, renderizado)
//                    rop.filter(img, img); //(src, dst) Sobreescribimos la propia imagen
//                    vi.getLienzo2D().repaint();
//                } catch (IllegalArgumentException e) {
//                    System.err.println(e.getLocalizedMessage());
//                }
//            }
//        }
        //Copio la imagen tal cual
        ColorModel cm = vi.getLienzo2D().getFondo(false).getColorModel();
        WritableRaster raster = vi.getLienzo2D().getFondo(false).copyData(null);
        boolean alfaPre = vi.getLienzo2D().getFondo(false).isAlphaPremultiplied();
        this.imagenOriginal = new BufferedImage(cm, raster, alfaPre, null);
        
        float offset[], factor[];
        if (vi != null && this.imagenOriginal != null) {           
            System.out.println("Tipo de imagen: " + this.imagenOriginal.getType());
            
            if (this.imagenOriginal.getColorModel().hasAlpha()){ //Tipos con canal alfa
                System.out.println("Canal alfa");
                //Si tienen alfa, tienen 4 componentes
                offset = new float[4];// = {this.deslizador.getValue()-50, this.deslizador.getValue()-50, this.deslizador.getValue()-50, 0};
                factor = new float[4];



                offset[3] = 0;
                factor[3] = 1.0F;
            }
            else{ // Si no tienen alfa tienen 3 componentes
                    offset = new float[3];
                    factor = new float[3];             
            }
            
            for (int i = 0; i < 3; i++) {
                offset[i] = 100.0F;
                factor[i] = 1.0F;
            }
            
            RescaleOp rop = new RescaleOp(factor, offset, null); //(contraste, brillo, renderizado)
            
            BufferedImage aux = rop.filter(this.imagenOriginal, null);            
            vi.getLienzo2D().setFondo(aux);
            vi.getLienzo2D().repaint();
        }
    }//GEN-LAST:event_rescaleOpActionPerformed

    private void convolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolveOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo(false);
            if (img != null) {
                try {
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    
                    BufferedImage imgaux = cop.filter(img, null);
                    vi.getLienzo2D().setFondo(imgaux);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_convolveOpActionPerformed

    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
                
        //Copio la imagen original del lienzo
        
        ColorModel cm = vi.getLienzo2D().getFondo(false).getColorModel();
        WritableRaster raster = vi.getLienzo2D().getFondo(false).copyData(null);
        boolean alfaPre = vi.getLienzo2D().getFondo(false).isAlphaPremultiplied();
        this.imagenOriginal = new BufferedImage(cm, raster, alfaPre, null);
        
        //Tambi√©n he probado a asignar la imagen del lienzo directamente a la variable imagenOriginal
        //this.imagenOriginal = vi.getLienzo2D().getFondo();
        System.out.println("Gano el foco");
        
        this.escritorio.repaint();
    }//GEN-LAST:event_brilloSliderFocusGained

    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        //Graphics2D g2dImagen = this.imagenOriginal.createGraphics();
        //vi.getLienzo2D().paint(g2dImagen);
        this.imagenOriginal = null;
        this.brilloSlider.setValue(0);
        System.out.println("Deslizador reseteado");
    }//GEN-LAST:event_brilloSliderFocusLost

    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        //Cada vez que se mueve el deslizador
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        float offset[], factor[];
        if (vi != null && this.imagenOriginal != null) {           
            try {
                System.out.println("Tipo de imagen: " + this.imagenOriginal.getType());
                int numComp;
                if (this.imagenOriginal.getColorModel().getNumColorComponents() < 3){ //Imagen de banda
                    numComp = 1;
                    if (this.imagenOriginal.getColorModel().hasAlpha()) {
                        offset = new float[2];
                        factor = new float[2];
                        
                        //Alfa como √∫ltimo componente
                        offset[1] = 0;
                        factor[1] = 1.0F;
                    }
                    else {
                        offset = new float[1];
                        factor = new float[1];
                    }
                    
                    offset[0] = this.brilloSlider.getValue()*(float)4 - 200;
                    factor[0] = 1.0F;
                }
                else {
                    numComp = 3;
                    if (this.imagenOriginal.getColorModel().hasAlpha()){ //Tipos con canal alfa tienen 4 componentes: RGB y Alfa
                        System.out.println("Canal alfa");

                        offset = new float[4];
                        factor = new float[4];
                        
                        //Componentes alfa
                        offset[3] = 0;
                        factor[3] = 1.0F;
                    }
                    else {
                        offset = new float[3];
                        factor = new float[3];
                    }
                }
                
                //Damos valores de brillo y contraste
                for (int i = 0; i < numComp; i++) {
                    offset[i] = this.brilloSlider.getValue()*(float)4 - 200;
                    factor[i] = 1.0F; 
                }

                RescaleOp rop = new RescaleOp(factor, offset, null); //(contraste, brillo, renderizado)

                //BufferedImage aux = rop.filter(this.imagenOriginal, null);            
                //vi.getLienzo2D().setFondo(aux);
                rop.filter(imagenOriginal, vi.getLienzo2D().getFondo());

                this.escritorio.repaint();

                System.out.println("Brillo: " + this.brilloSlider.getValue());
            }
            catch(Exception e) {
                System.err.println("Error en el brillo");
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_brilloSliderStateChanged

    private void listaFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaFiltrosActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo(true);
            Kernel k;
            k = this.getKernel(this.listaFiltros.getSelectedIndex());
            
            if (img != null && k != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);                   
                    BufferedImage imgaux = cop.filter(img, null);
                    vi.getLienzo2D().setFondo(imgaux);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_listaFiltrosActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        this.nuevaVentanaActionPerformed(evt);
    }//GEN-LAST:event_nuevoActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        this.abrirDibujoActionPerformed(evt);
    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        this.guardarDibujoActionPerformed(evt);
    }//GEN-LAST:event_guardarActionPerformed

    private void listaColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaColoresActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        Color colorActual = this.listaColores.getItemAt(this.listaColores.getSelectedIndex());
            
        System.out.println("Color actual: "+ colorActual);

        if (vi != null) {
            vi.getLienzo2D().setColor(colorActual);
        }
    }//GEN-LAST:event_listaColoresActionPerformed

    private void escritorioMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_escritorioMouseMoved

    }//GEN-LAST:event_escritorioMouseMoved

    private void rellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenarActionPerformed
        this.rellenoSelected = !this.rellenoSelected; //No funciona la detecci√≥n de las posiciones de este bot√≥n
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        this.rellenar.setSelected(this.rellenoSelected);
        
        if (vi != null) {
            vi.getLienzo2D().setRelleno(this.rellenoSelected);
        }
       
       
    }//GEN-LAST:event_rellenarActionPerformed

    private void transparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaActionPerformed
        this.transparenciaSelected = !this.transparenciaSelected;
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        this.transparencia.setSelected(this.transparenciaSelected);
        
        if (vi != null) {
            vi.getLienzo2D().setTransparencia(this.transparenciaSelected);
            vi.getLienzo2D().setAtributos();
        }
    }//GEN-LAST:event_transparenciaActionPerformed

    private void alisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarActionPerformed
        this.alisarSelected = !this.alisarSelected;
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        this.alisar.setSelected(this.alisarSelected);
        
        if (vi != null) {
            vi.getLienzo2D().setAlisar(this.alisarSelected);
            vi.getLienzo2D().setAtributos();
        }
    }//GEN-LAST:event_alisarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        this.seleccionarSelected = !this.seleccionarSelected;
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        this.editar.setSelected(this.seleccionarSelected);
        
        if (vi != null) {
            vi.getLienzo2D().setEditar(this.seleccionarSelected);
        }
    }//GEN-LAST:event_editarActionPerformed

    private void affineTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_affineTransformActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            
            if (img != null) {
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(1.5, 1.5);
                    AffineTransformOp atop = new AffineTransformOp(at, null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setFondo(imgdest);
                    vi.getLienzo2D().repaint();
                }
                catch (Exception e) {
                    System.out.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_affineTransformActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void lookupOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lookupOpActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            
            if (img != null) {
                try{
                    byte functionT[] = new byte[256];
                    //Relleno la funci√≥n de la forma en que quiero que act√∫en los colores, en este caso invirti√©ndolos
                    for (int x = 0; x < 256; x++) {
                        functionT[x] = (byte) (255-x);
                    }
                    LookupTable tabla = new ByteLookupTable(0, functionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    
                    //Compruebo si la imagen es BGR para evitar incompatibilidades al transformar
                    if (img.getType() == BufferedImage.TYPE_INT_BGR || img.getType() == BufferedImage.TYPE_3BYTE_BGR || img.getType() == BufferedImage.TYPE_4BYTE_ABGR) {
                        img = ImageTools.convertImageType(img, BufferedImage.TYPE_INT_ARGB);
                    }
                    
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setFondo(imgdest);
                    vi.getLienzo2D().repaint();
                }
                catch (Exception e) {
                    System.out.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_lookupOpActionPerformed

    private void contraste(int tipo) {
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try {
                    //int type = tipo;
                    LookupTable lt = LookupTableProducer.createLookupTable(tipo);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch (Exception e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    private void cuadraticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cuadraticaActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if ( vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try{
                    LookupTable lt = cuadratica(128);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(img, img);
                    vi.getLienzo2D().repaint();
                }
                catch(Exception e){
                    System.out.println("Error en la funci√≥n cuadr√°tica");
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_cuadraticaActionPerformed

    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed
        this.rotar(90);
    }//GEN-LAST:event_rotacion90ActionPerformed

    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
        this.rotar(180);
    }//GEN-LAST:event_rotacion180ActionPerformed

    private void rotacionSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusGained
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            ColorModel cm = vi.getLienzo2D().getFondo(false).getColorModel();
            WritableRaster raster = vi.getLienzo2D().getFondo(false).copyData(null);
            boolean alfaPre = vi.getLienzo2D().getFondo(false).isAlphaPremultiplied();
            this.imagenOriginal = new BufferedImage(cm, raster, alfaPre, null);
            
            vi.setGirado(true); // Como la hemos girado, tenemos que guardar en un formato compatible
            System.out.println("imagen girada: " + vi.isGirado());
        }
    }//GEN-LAST:event_rotacionSliderFocusGained

    private void rotacionSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusLost
        this.imagenOriginal = null;
        this.rotacionSlider.setValue(0);
    }//GEN-LAST:event_rotacionSliderFocusLost

    private void rotacionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotacionSliderStateChanged
       VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
       
       if (vi != null && this.imagenOriginal != null) {
           try {
               double r = this.rotacionSlider.getValue() * (2*Math.PI/100) ;
               System.out.println("Rotacion: " + this.rotacionSlider.getValue());
               Point c = new Point(this.imagenOriginal.getWidth()/2, this.imagenOriginal.getHeight()/2);
               AffineTransform at = AffineTransform.getRotateInstance(r, c.x, c.y);
               AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgdest = atop.filter(this.imagenOriginal, null);
               vi.getLienzo2D().setFondo(imgdest);
               vi.getLienzo2D().repaint();
           }
           catch(Exception e) {}
       }
    }//GEN-LAST:event_rotacionSliderStateChanged

    private void escalaMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escalaMasActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage imgSrc = vi.getLienzo2D().getFondo();
            try {
                AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imgSrc, null);
                vi.getLienzo2D().setFondo(imgdest);
                vi.getLienzo2D().repaint();
            }
            catch (Exception e) {
                System.out.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_escalaMasActionPerformed

    private void escalaMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_escalaMenosActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage imgSrc = vi.getLienzo2D().getFondo();
            try {
                AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imgSrc, null);
                vi.getLienzo2D().setFondo(imgdest);
                vi.getLienzo2D().repaint();
            }
            catch (Exception e) {
                System.out.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_escalaMenosActionPerformed

    private void duplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarActionPerformed
        VentanaInterna vi  = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            try{
                BufferedImage img = vi.getLienzo2D().getFondo(true);
                if (img != null){ //Si la imagen de esta ventana no es nula, creamos otra nueva ventana
                    //Creamos imagen con canal alfa por si hay transparencias
                    BufferedImage imgAlfa = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
                    Graphics g = imgAlfa.getGraphics();
                    VentanaInterna vi2 =  new VentanaInterna();
                    this.escritorio.add(vi2); //La a√±adimos al escritorio
                    vi2.setVisible(true);
                    vi2.setTitle(vi.getTitle());
                    vi2.getLienzo2D().setFondo(img); //Y le pasamos a su lienzo la imagen de la ventana copiada

                    this.setOpcionesDefault();
                    vi2.paint(g);
                    
                    //A√±ado los eventos que le pongo a todas las ventanas internas cuando las creo
                    vi2.getLienzo2D().addMouseMotionListener(new MouseMotionAdapter() {
                    @Override
                    public void mouseMoved(MouseEvent me) {
                        puntero.x = me.getX();
                        puntero.y = me.getY();
                        coordenadasPuntero.setText("Coordenadas del puntero: (" + puntero.x + ", " + puntero.y + ")");
                    }
                });
                }
            }
            catch(Exception e){
                 //Creamos una ventana de di√°logo  donde indicamos el error
                JDialog aviso = new JDialog(new JFrame(),"ERROR AL ABRIR");
                JLabel l = new JLabel("El archivo seleccionado no es v√°lido.");
                aviso.add(l);
                aviso.setSize(500, 200);
                aviso.setVisible(true);
                System.out.println("Error al duplicar la imagen");
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_duplicarActionPerformed

    private void mCuadSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mCuadSliderFocusGained
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        //Obtenemos copia de la imagen original que es sobre la que aplicamos la funci√≥n cuadr√°tica con los distintos par√°metros de m
        ColorModel cm = vi.getLienzo2D().getFondo(false).getColorModel();
        WritableRaster raster = vi.getLienzo2D().getFondo(false).copyData(null);
        boolean alfaPre = vi.getLienzo2D().getFondo(false).isAlphaPremultiplied();
        this.imagenOriginal = new BufferedImage(cm, raster, alfaPre, null);
        
    }//GEN-LAST:event_mCuadSliderFocusGained

    private void mCuadSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mCuadSliderFocusLost
        //La operaci√≥n ha terminado
        this.imagenOriginal = null;
        this.mCuadSlider.setValue(0);
    }//GEN-LAST:event_mCuadSliderFocusLost

    private void mCuadSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mCuadSliderStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        //Aplico el filtro de funci√≥n cuadr√°tica sobre la imagen original
        if (vi != null && this.imagenOriginal != null) {
            LookupTable lt = cuadratica(this.mCuadSlider.getValue()*2.55);
            LookupOp ltop = new LookupOp(lt, null);
            ltop.filter(this.imagenOriginal, vi.getLienzo2D().getFondo());
            vi.getLienzo2D().repaint();
        }
    }//GEN-LAST:event_mCuadSliderStateChanged

    private void bandCombineOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandCombineOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try {
                    float[][] matriz;
                    if (img.getColorModel().hasAlpha()) { //Si tiene canal alfa debemos a√±adir un valor m√°s a la matriz
                        matriz = new float[][]{{1.0F, 0.0F, 0.0F, 0.0F}, {0.0F, 0.0F, 1.0F, 0.0F}, {0.0F, 1.0F, 0.0F, 0.0F}, {0.0F, 0.0F, 0.0F, 1.0F}}; 
                    }
                    else {
                        matriz = new float[][]{{1.0F, 0.0F, 0.0F}, {0.0F, 0.0F, 1.0F}, {0.0F, 1.0F, 0.0F}}; 
                    }
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_bandCombineOpActionPerformed

    private void colorConvertOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorConvertOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try {
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ColorConvertOp op = new ColorConvertOp(cs, null);
                    BufferedImage imgdest = op.filter(img, null);
                    vi.getLienzo2D().setFondo(imgdest);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_colorConvertOpActionPerformed

    private void extraerBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraerBandasActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            
            if (img != null) {
                VentanaInterna vaux;
                for (int i = 0; i < img.getRaster().getNumBands(); i++) {
                    //Extraigo una banda
                    BufferedImage banda = getImageBand(img, i);

                    //Creo una ventana Interna por cada banda
                    vaux = new VentanaInterna();
                    vaux.getLienzo2D().setFondo(banda);
                    //Le vinculo el raster de la imagen original
                    //vaux.getLienzo2D().getFondo().
                    
                    //Indicamos en la ventana interna qu√© banda es
                    switch (i) {
                        case 0:
                            vaux.setTitle(vi.getTitle() + "[BANDA ROJA]");
                            break;
                        case 1:
                            vaux.setTitle(vi.getTitle() + "[BANDA VERDE]");
                            break;
                        case 2:
                            vaux.setTitle(vi.getTitle() + "[BANDA AZUL]");
                            break;
                        case 3:
                            vaux.setTitle(vi.getTitle() + "[BANDA ALFA]");
                            break;
                    }
                    
                    vaux.repaint();
                    this.escritorio.add(vaux);
                    vaux.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_extraerBandasActionPerformed

    private BufferedImage getImageBand(BufferedImage img, int banda) {
        // Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY 
        //ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
        
        ColorSpace cs = new sm.image.color.GreyColorSpace();
        ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE); //(colorSpace, hasAlpha, isAlphaPremultiplied, transparency, transferType)
        
        //Creamos el nuevo raster a partir del raster de la imagen original
        int vband[] = {banda};
        WritableRaster bRaster = (WritableRaster) img.getRaster().createWritableChild(0, 0, img.getWidth(), img.getHeight(), 0, 0, vband); //(parentX, parentY, width, height, childMinX, childMinY, bandList)
        
        //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
        return new BufferedImage(cm, bRaster, false, null);
    }
    
    private void mediaColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaColoresActionPerformed
       VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                float[][] matriz;
                try {
                    if (img.getColorModel().hasAlpha()) { //Si tiene canal alfa debemos a√±adir un valor m√°s a la matriz
                        matriz = new float[][]{{0.0F, 0.5F, 0.5F, 0.0F}, {0.5F, 0.0F, 0.5F, 0.0F}, {0.5F, 0.5F, 0.0F, 0.0F}, {0.0F, 0.0F, 0.0F, 1.0F}}; 
                    }
                    else {
                        matriz = new float[][]{{0.0F, 0.5F, 0.5F}, {0.5F, 0.0F, 0.5F}, {0.5F, 0.5F, 0.0F}}; 
                    }
                    BandCombineOp bcop = new BandCombineOp(matriz, null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_mediaColoresActionPerformed

    private void colorSpaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorSpaceActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage imgSrc = vi.getLienzo2D().getFondo();
            if (imgSrc != null){
                BufferedImage imgDst;
                String tipo = (String) this.colorSpace.getSelectedItem();
                ColorSpace cs;

                switch (tipo) {
                    case "RGB":
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                        break;
                    case "YCC":
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                        break;
                    case "GREY":
                        cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                        break;
                    default:
                        cs = null;
                        break;    
                }

                ColorConvertOp cop = new ColorConvertOp(cs, null);
                imgDst = cop.filter(imgSrc, null);
                
                //Creo una nueva ventana
                VentanaInterna vi2 = new VentanaInterna();
                vi2.getLienzo2D().setFondo(imgDst);
                vi2.getLienzo2D().repaint();
                vi2.setTitle(vi.getTitle() + "["+tipo+"]");
                vi2.setVisible(true);
                this.escritorio.add(vi2);
            }
        }
        
    }//GEN-LAST:event_colorSpaceActionPerformed

    private void botonTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTintadoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try{
                    TintOp tintado = new TintOp((Color)listaColores.getSelectedItem(), 0.5f);
                    tintado.filter(img, img);
                    vi.repaint();
                }
                catch(Exception e){
                    System.err.print(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonTintadoActionPerformed

    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try{
                    SepiaOp sepia = new SepiaOp();
                    sepia.filter(img, img);
                    vi.repaint();
                }
                catch(Exception e){
                    System.err.print(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonSepiaActionPerformed

    private void botonEcualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEcualizarActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try{
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(img, img);
                    vi.getLienzo2D().repaint();
                }
                catch(Exception e){
                    System.err.print(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonEcualizarActionPerformed

    private void posterizarOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posterizarOpActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try{
                    PosterizarOp pOp = new PosterizarOp(5);
                    pOp.filter(img, img);
                    vi.getLienzo2D().repaint();
                }
                catch(Exception e){
                    System.err.print(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_posterizarOpActionPerformed

    private void NColoresSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NColoresSliderFocusGained
        this.copiarImagen(); //Obtenemos la copia de la imagen original de la ventana interna en uso
    }//GEN-LAST:event_NColoresSliderFocusGained

    private void NColoresSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_NColoresSliderFocusLost
        this.imagenOriginal = null;
        this.NColoresSlider.setValue(0);
    }//GEN-LAST:event_NColoresSliderFocusLost

    private void NColoresSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_NColoresSliderStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            if (this.imagenOriginal != null) {
                try{
                    float valor = this.NColoresSlider.getValue() * (float)0.18 + 2;
                    PosterizarOp pOp = new PosterizarOp(valor);
                    pOp.filter(this.imagenOriginal, vi.getLienzo2D().getFondo());
                    vi.getLienzo2D().repaint();
                }
                catch(Exception e){
                    System.err.print(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_NColoresSliderStateChanged

    private void botonRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRojoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo();
            if (img != null) {
                try{
                    RojoOp rop = new RojoOp(100);
                    rop.filter(img, img);
                    vi.getLienzo2D().repaint();
                }
                catch(Exception e){
                    System.err.print(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_botonRojoActionPerformed

    private void tintadoSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tintadoSliderFocusGained
        this.copiarImagen();
    }//GEN-LAST:event_tintadoSliderFocusGained

    private void tintadoSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tintadoSliderFocusLost
        this.imagenOriginal = null;
        this.tintadoSlider.setValue(0);
    }//GEN-LAST:event_tintadoSliderFocusLost

    private void tintadoSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tintadoSliderStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            if (this.imagenOriginal != null) {
                float valor = this.tintadoSlider.getValue()*(float)0.01;
                TintOp top = new TintOp((Color)this.listaColores.getSelectedItem(), valor);
                top.filter(this.imagenOriginal, vi.getLienzo2D().getFondo()); //No funciona con png
                vi.getLienzo2D().repaint();
            }
        }
    }//GEN-LAST:event_tintadoSliderStateChanged

    private void umbralRojoSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralRojoSliderFocusGained
        this.copiarImagen();
    }//GEN-LAST:event_umbralRojoSliderFocusGained

    private void umbralRojoSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbralRojoSliderFocusLost
        this.imagenOriginal = null;
        this.umbralRojoSlider.setValue(0);
    }//GEN-LAST:event_umbralRojoSliderFocusLost

    private void umbralRojoSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbralRojoSliderStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            if (this.imagenOriginal != null) {
                float valor = (float) (this.umbralRojoSlider.getValue() * 2);
                System.out.println("valor = " + valor );
                RojoOp rop = new RojoOp((int) valor);
                rop.filter(this.imagenOriginal, vi.getLienzo2D().getFondo());
                vi.getLienzo2D().repaint();
            }
        }
    }//GEN-LAST:event_umbralRojoSliderStateChanged

    private void listaContrastesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaContrastesActionPerformed
        int id = Integer.parseInt((String)this.listaContrastes.getSelectedItem());
        switch(id){
            case 0:
                contraste(LookupTableProducer.TYPE_SFUNCION);
                break;
            case 1:
                contraste(LookupTableProducer.TYPE_LOGARITHM);
                break;
            case 2:
                contraste(LookupTableProducer.TYPE_POWER);
                break;
        }
    }//GEN-LAST:event_listaContrastesActionPerformed

    private void rotar(double grados) {
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null) {
            BufferedImage imgori = vi.getLienzo2D().getFondo();
            
            if (imgori != null) {
                try{
                    double r = Math.toRadians(grados);
                    Point c = new Point(imgori.getWidth()/2, imgori.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, c.x, c.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgori, null);
                    vi.getLienzo2D().setFondo(imgdest);
                    vi.getLienzo2D().repaint();
                }
                catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }   
            }
        }
    }
    
    public LookupTable cuadratica(double m) {
        double max;
        double coef = 0.01;
        if (m >= 128) //A partir de 128 obtiene el m√°ximo en el 0
            max = (coef * Math.pow(0-m, 2));
        else //En otro caso obtiene el m√°ximo en 255
            max = (coef * Math.pow(255-m, 2));
        
        double K = 255/max; //Coeficiente de normalizaci√≥n para tener valores en [0, 255]
        LookupTable lt;
        byte funcionCuad[] = new byte[256];
        
        for (int x = 0; x < 256; x++) {
            funcionCuad[x] = (byte) (K * 0.01*(Math.pow((x - m), 2)));
            
            
            System.out.println("K = " + K + ",x = " + x + ",m = " + m);
            System.out.println("funcionCuad[" + x + "] = " + funcionCuad[x]);            
        }
        
        lt = new ByteLookupTable(0, funcionCuad);
        
        return lt;
    }
    
    private Kernel getKernel(int seleccion) {
        Kernel k = null;
        switch(seleccion) {
            case 0:
                //float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
            case 1:
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case 2:
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
            case 3:
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case 4:
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
        }
        
        return k;
    }
    
    private void copiarImagen() {
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            if (vi.getLienzo2D().getFondo() != null){
                ColorModel cm = vi.getLienzo2D().getFondo(false).getColorModel();
                WritableRaster raster = vi.getLienzo2D().getFondo(false).copyData(null);
                boolean alfaPre = vi.getLienzo2D().getFondo(false).isAlphaPremultiplied();
                this.imagenOriginal = new BufferedImage(cm, raster, alfaPre, null);
            }
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    
    private class ManejadorVentanaInterna extends InternalFrameAdapter {
        @Override
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            System.out.println("Ventana seleccionada");
            VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
            
            System.out.println("Herramienta de esta ventana = " + vi.getLienzo2D().getHerramienta());
            //Obtenemos las herramientas en uso en la ventana interna
            botonLapiz.setSelected(Herramienta.LAPIZ.equals(vi.getLienzo2D().getHerramienta()));
            botonLinea.setSelected(Herramienta.LINEA.equals(vi.getLienzo2D().getHerramienta()));
            botonRectangulo.setSelected(Herramienta.RECTANGULO.equals(vi.getLienzo2D().getHerramienta()));
            botonOvalo.setSelected(Herramienta.OVALO.equals(vi.getLienzo2D().getHerramienta()));
            botonPera.setSelected(Herramienta.PERA.equals(vi.getLienzo2D().getHerramienta()));
            
            botonGrosor.setValue(vi.getLienzo2D().getGrosor());
        }
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider NColoresSlider;
    private javax.swing.JPanel PanelCentral;
    private javax.swing.JButton abrir;
    private javax.swing.JMenuItem abrirDibujo;
    private javax.swing.JMenuItem affineTransform;
    private javax.swing.JToggleButton alisar;
    private javax.swing.JMenu archivo;
    private javax.swing.JMenuItem bandCombineOp;
    private javax.swing.JPanel barraAtributos;
    private javax.swing.JPanel barraEstado;
    private javax.swing.JToolBar barraFormas;
    private javax.swing.JButton botonEcualizar;
    private javax.swing.JSpinner botonGrosor;
    private javax.swing.JToggleButton botonLapiz;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JToggleButton botonOvalo;
    private javax.swing.JToggleButton botonPera;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JButton botonRojo;
    private javax.swing.JButton botonSepia;
    private javax.swing.JButton botonTintado;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.JMenuItem colorConvertOp;
    private javax.swing.JComboBox<String> colorSpace;
    private javax.swing.JMenuItem convolveOp;
    private javax.swing.JLabel coordenadasPuntero;
    private javax.swing.JButton cuadratica;
    private javax.swing.JMenuItem duplicar;
    private javax.swing.JMenu edicion;
    private javax.swing.JToggleButton editar;
    private javax.swing.JButton escalaMas;
    private javax.swing.JButton escalaMenos;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel etiquetaHerramientaActual;
    private javax.swing.JButton extraerBandas;
    private javax.swing.JButton guardar;
    private javax.swing.JMenuItem guardarDibujo;
    private javax.swing.JMenu imagen;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JComboBox<Color> listaColores;
    private javax.swing.JComboBox<String> listaContrastes;
    private javax.swing.JComboBox<String> listaFiltros;
    private javax.swing.JMenuItem lookupOp;
    private javax.swing.JSlider mCuadSlider;
    private javax.swing.JButton mediaColores;
    private javax.swing.JMenuItem nuevaVentana;
    private javax.swing.JButton nuevo;
    private javax.swing.JMenuItem posterizarOp;
    private javax.swing.JToggleButton rellenar;
    private javax.swing.JMenuItem rescaleOp;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion90;
    private javax.swing.JSlider rotacionSlider;
    private javax.swing.JSlider tintadoSlider;
    private javax.swing.JToggleButton transparencia;
    private javax.swing.JSlider umbralRojoSlider;
    private javax.swing.JCheckBoxMenuItem verBarraAtributos;
    private javax.swing.JCheckBoxMenuItem verBarraEstado;
    private javax.swing.JCheckBoxMenuItem verBarraFormas;
    // End of variables declaration//GEN-END:variables
}
