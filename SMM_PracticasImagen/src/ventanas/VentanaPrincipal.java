/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import SM.PCS.Graficos.Herramienta;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.FocusEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.KernelProducer;

/**
 *
 * @author pabloc
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaInterna
     */
    
    private Herramienta herramientaActual;
    private BufferedImage imagenOriginal;
    private Point puntero;
    private boolean rellenoSelected, transparenciaSelected, alisarSelected, seleccionarSelected;
    
    public VentanaPrincipal() {
        initComponents();
        this.puntero = new Point(0,0);
        this.herramientaActual = Herramienta.LAPIZ;
        this.coordenadasPuntero.setText("Coordenadas del puntero: (" + this.puntero.x + ", " + this.puntero.y + ")");
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + Herramienta.LAPIZ); // Por defecto el l√°piz al principio
        //this.deslizador = new JSlider();
        this.deslizador.setValue(50);
        System.out.println("deslizador: " + this.deslizador.getValue());
        
        rellenoSelected = transparenciaSelected = alisarSelected = seleccionarSelected = false;
//        this.rellenar.setSelected(false);
//        this.transparencia.setSelected(false);
//        this.alisar.setSelected(false);
//        this.editar.setSelected(false);
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barraFormas = new javax.swing.JToolBar();
        nuevo = new javax.swing.JButton();
        abrir = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        botonLapiz = new javax.swing.JToggleButton();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonOvalo = new javax.swing.JToggleButton();
        botonPera = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        Color colores[] = {Color.BLACK, Color.RED, Color.BLUE, Color.GREEN, Color.YELLOW, Color.WHITE};
        listaColores = new javax.swing.JComboBox<>(colores);
        rellenar = new javax.swing.JToggleButton();
        transparencia = new javax.swing.JToggleButton();
        alisar = new javax.swing.JToggleButton();
        editar = new javax.swing.JToggleButton();
        barraAtributos = new javax.swing.JPanel();
        barraEstado = new javax.swing.JPanel();
        etiquetaHerramientaActual = new javax.swing.JLabel();
        coordenadasPuntero = new javax.swing.JLabel();
        colorNegro = new javax.swing.JButton();
        colorBlanco = new javax.swing.JButton();
        colorAmarillo = new javax.swing.JButton();
        colorRojo = new javax.swing.JButton();
        colorVerde = new javax.swing.JButton();
        colorAzul = new javax.swing.JButton();
        botonRelleno = new javax.swing.JCheckBox();
        botonEditar = new javax.swing.JCheckBox();
        botonAlisar = new javax.swing.JCheckBox();
        botonTransparencia = new javax.swing.JCheckBox();
        botonGrosor = new javax.swing.JSpinner();
        deslizador = new javax.swing.JSlider();
        listaFiltros = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        PanelCentral = new javax.swing.JPanel();
        escritorio = new javax.swing.JDesktopPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivo = new javax.swing.JMenu();
        nuevaVentana = new javax.swing.JMenuItem();
        abrirDibujo = new javax.swing.JMenuItem();
        guardarDibujo = new javax.swing.JMenuItem();
        edicion = new javax.swing.JMenu();
        verBarraEstado = new javax.swing.JCheckBoxMenuItem();
        verBarraAtributos = new javax.swing.JCheckBoxMenuItem();
        verBarraFormas = new javax.swing.JCheckBoxMenuItem();
        imagen = new javax.swing.JMenu();
        recaleOp = new javax.swing.JMenuItem();
        convolveOp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraFormas.setRollover(true);

        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevo.setFocusable(false);
        nuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });
        barraFormas.add(nuevo);

        abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrir.setFocusable(false);
        abrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        barraFormas.add(abrir);

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardar.setFocusable(false);
        guardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        barraFormas.add(guardar);
        barraFormas.add(jSeparator1);

        botonLapiz.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        botonLapiz.setFocusable(false);
        botonLapiz.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLapiz.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLapiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLapizActionPerformed(evt);
            }
        });
        barraFormas.add(botonLapiz);

        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLineaActionPerformed(evt);
            }
        });
        barraFormas.add(botonLinea);

        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRectanguloActionPerformed(evt);
            }
        });
        barraFormas.add(botonRectangulo);

        botonOvalo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        botonOvalo.setFocusable(false);
        botonOvalo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonOvalo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonOvalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOvaloActionPerformed(evt);
            }
        });
        barraFormas.add(botonOvalo);

        botonPera.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pera.png"))); // NOI18N
        botonPera.setFocusable(false);
        botonPera.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPera.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPeraActionPerformed(evt);
            }
        });
        barraFormas.add(botonPera);
        barraFormas.add(jSeparator2);

        listaColores.setMaximumSize(new java.awt.Dimension(64, 23));
        listaColores.setRenderer(new ColorCellRender());
        listaColores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaColoresActionPerformed(evt);
            }
        });
        barraFormas.add(listaColores);

        rellenar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        rellenar.setFocusable(false);
        rellenar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rellenar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rellenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenarActionPerformed(evt);
            }
        });
        barraFormas.add(rellenar);

        transparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        transparencia.setFocusable(false);
        transparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparenciaActionPerformed(evt);
            }
        });
        barraFormas.add(transparencia);

        alisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisar.setFocusable(false);
        alisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisarActionPerformed(evt);
            }
        });
        barraFormas.add(alisar);

        editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        editar.setFocusable(false);
        editar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarActionPerformed(evt);
            }
        });
        barraFormas.add(editar);

        getContentPane().add(barraFormas, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout barraEstadoLayout = new javax.swing.GroupLayout(barraEstado);
        barraEstado.setLayout(barraEstadoLayout);
        barraEstadoLayout.setHorizontalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barraEstadoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(etiquetaHerramientaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(coordenadasPuntero, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        barraEstadoLayout.setVerticalGroup(
            barraEstadoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(etiquetaHerramientaActual, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
            .addComponent(coordenadasPuntero, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        colorNegro.setBackground(new java.awt.Color(0, 0, 0));
        colorNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorNegroActionPerformed(evt);
            }
        });

        colorBlanco.setBackground(new java.awt.Color(255, 255, 255));
        colorBlanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBlancoActionPerformed(evt);
            }
        });

        colorAmarillo.setBackground(new java.awt.Color(255, 255, 0));
        colorAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorAmarilloActionPerformed(evt);
            }
        });

        colorRojo.setBackground(new java.awt.Color(255, 0, 0));
        colorRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorRojoActionPerformed(evt);
            }
        });

        colorVerde.setBackground(new java.awt.Color(0, 255, 0));
        colorVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorVerdeActionPerformed(evt);
            }
        });

        colorAzul.setBackground(new java.awt.Color(51, 153, 255));
        colorAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorAzulActionPerformed(evt);
            }
        });

        botonRelleno.setText("Relleno");
        botonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRellenoActionPerformed(evt);
            }
        });

        botonEditar.setText("Editar");
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });

        botonAlisar.setText("Alisar");
        botonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAlisarActionPerformed(evt);
            }
        });

        botonTransparencia.setText("Transparencia");
        botonTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTransparenciaActionPerformed(evt);
            }
        });

        botonGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                botonGrosorStateChanged(evt);
            }
        });
        botonGrosor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonGrosorMouseClicked(evt);
            }
        });

        deslizador.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                deslizadorStateChanged(evt);
            }
        });
        deslizador.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deslizadorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                deslizadorFocusLost(evt);
            }
        });

        listaFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplace" }));
        listaFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaFiltrosActionPerformed(evt);
            }
        });

        jLabel1.setText("Brillo:");

        jLabel2.setText("Filtros:");

        javax.swing.GroupLayout barraAtributosLayout = new javax.swing.GroupLayout(barraAtributos);
        barraAtributos.setLayout(barraAtributosLayout);
        barraAtributosLayout.setHorizontalGroup(
            barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(barraEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(barraAtributosLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(colorRojo, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(colorNegro, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(colorBlanco, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorVerde, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(colorAmarillo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorAzul, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addGap(42, 42, 42)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonRelleno)
                    .addComponent(botonEditar))
                .addGap(26, 26, 26)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(barraAtributosLayout.createSequentialGroup()
                        .addComponent(botonTransparencia)
                        .addGap(78, 78, 78)
                        .addComponent(botonGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(deslizador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(barraAtributosLayout.createSequentialGroup()
                        .addComponent(botonAlisar)
                        .addGap(213, 213, 213)
                        .addComponent(jLabel1)))
                .addGap(34, 34, 34)
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(listaFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(238, Short.MAX_VALUE))
        );
        barraAtributosLayout.setVerticalGroup(
            barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, barraAtributosLayout.createSequentialGroup()
                .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(barraAtributosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(colorNegro, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(colorBlanco, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(colorAmarillo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(botonRelleno)
                                .addComponent(botonAlisar))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonGrosor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(barraAtributosLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(deslizador, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(barraAtributosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(colorRojo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(colorVerde, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(colorAzul, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(botonEditar)
                                .addComponent(botonTransparencia))
                            .addComponent(listaFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(barraEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(barraAtributos, java.awt.BorderLayout.PAGE_END);

        PanelCentral.setLayout(new java.awt.BorderLayout());

        escritorio.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                escritorioMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1052, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
        );

        PanelCentral.add(escritorio, java.awt.BorderLayout.CENTER);

        getContentPane().add(PanelCentral, java.awt.BorderLayout.CENTER);

        archivo.setText("Archivo");

        nuevaVentana.setText("Nuevo");
        nuevaVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaVentanaActionPerformed(evt);
            }
        });
        archivo.add(nuevaVentana);

        abrirDibujo.setText("Abrir...");
        abrirDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirDibujoActionPerformed(evt);
            }
        });
        archivo.add(abrirDibujo);

        guardarDibujo.setText("Guardar como...");
        guardarDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarDibujoActionPerformed(evt);
            }
        });
        archivo.add(guardarDibujo);

        jMenuBar1.add(archivo);

        edicion.setText("Edicion");

        verBarraEstado.setSelected(true);
        verBarraEstado.setText("Ver barra de estado");
        verBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraEstadoActionPerformed(evt);
            }
        });
        edicion.add(verBarraEstado);

        verBarraAtributos.setSelected(true);
        verBarraAtributos.setText("Ver barra de atributos");
        verBarraAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraAtributosActionPerformed(evt);
            }
        });
        edicion.add(verBarraAtributos);

        verBarraFormas.setSelected(true);
        verBarraFormas.setText("Ver barra de formas");
        verBarraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraFormasActionPerformed(evt);
            }
        });
        edicion.add(verBarraFormas);

        jMenuBar1.add(edicion);

        imagen.setText("Imagen");

        recaleOp.setText("RescaleOp");
        recaleOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recaleOpActionPerformed(evt);
            }
        });
        imagen.add(recaleOp);

        convolveOp.setText("ConvolveOp");
        convolveOp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolveOpActionPerformed(evt);
            }
        });
        imagen.add(convolveOp);

        jMenuBar1.add(imagen);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void botonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTransparenciaActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setTransparencia(this.botonTransparencia.isSelected());
        vi.getLienzo2D().setAtributos();
    }//GEN-LAST:event_botonTransparenciaActionPerformed

    private void nuevaVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaVentanaActionPerformed
        //Creamos nueva ventana interna
        VentanaInterna vi = new VentanaInterna();
        this.escritorio.add(vi);
        
        vi.addInternalFrameListener(new ManejadorVentanaInterna());
        vi.getLienzo2D().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent me) {
                puntero.x = me.getX();
                puntero.y = me.getY();
                coordenadasPuntero.setText("Coordenadas del puntero: (" + puntero.x + ", " + puntero.y + ")");
            }
        });
            

        BufferedImage img;
        img = new BufferedImage(300, 300, BufferedImage.TYPE_INT_RGB);
        Graphics g = img.getGraphics();
        //vi.getLienzo2D().setFondo(img);
        vi.getLienzo2D().paint(g); //Llamar a que dibuje como paint pero un rect√°ngulo blanco
        //this.setOpcionesDefault();
        vi.setVisible(true);
    }//GEN-LAST:event_nuevaVentanaActionPerformed

    private void guardarDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarDibujoActionPerformed
        VentanaInterna vi  = (VentanaInterna) this.escritorio.getSelectedFrame();
        FileFilter filter = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg");
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo(true); //true --> Guardamos las figuras dibujadas sobre la imagen
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                dlg.addChoosableFileFilter(filter);
                
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try{
                        File f = dlg.getSelectedFile();
                        String extension = getExtension(f.getName());
                        ImageIO.write(img, extension, f);
                        System.out.println("Guardada imagen con extensi√≥n " + extension);
                        vi.setTitle(f.getName());
                    }
                    catch (Exception e) {
                        JDialog aviso = new JDialog();
                        aviso.setTitle("ERROR AL GUARDAR");
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_guardarDibujoActionPerformed

    private String getExtension(String nombreArchivo) {        
        if (nombreArchivo.endsWith(".jpg")){
            System.out.println("Detectada extensi√≥n jpg");
            return "jpg";
        }
        else if (nombreArchivo.endsWith(".png")) {
            System.out.println("Detectada extensi√≥n png");
            return "png";
        }
        else if (nombreArchivo.endsWith(".tiff")) {
            System.out.println("Detectada extensi√≥n tiff");
            return "tiff";
        }
            
        return null;
    }
            
            
    private void botonLapizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLapizActionPerformed
        this.botonLapiz.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.LAPIZ);
        
        this.botonLinea.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonOvalo.setSelected(false);
        this.botonPera.setSelected(false);
        
        this.herramientaActual = Herramienta.LAPIZ;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonLapizActionPerformed

    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        this.botonLinea.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.LINEA);
        
        this.botonLapiz.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonOvalo.setSelected(false);
        this.botonPera.setSelected(false);
        
        this.herramientaActual = Herramienta.LINEA;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonLineaActionPerformed

    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        this.botonRectangulo.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.RECTANGULO);
        
        this.botonLapiz.setSelected(false);
        this.botonLinea.setSelected(false);
        this.botonOvalo.setSelected(false);
        this.botonPera.setSelected(false);
        
        this.herramientaActual = Herramienta.RECTANGULO;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonRectanguloActionPerformed

    private void botonOvaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOvaloActionPerformed
        this.botonOvalo.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.OVALO);
        
        this.botonLapiz.setSelected(false);
        this.botonLinea.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonPera.setSelected(false);
        
        this.herramientaActual = Herramienta.OVALO;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonOvaloActionPerformed

    private void botonPeraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPeraActionPerformed
        this.botonPera.setSelected(true);
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        if (vi != null)
            vi.setHerramienta(Herramienta.PERA);
        
        this.botonLapiz.setSelected(false);
        this.botonLinea.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonOvalo.setSelected(false);
        
        this.herramientaActual = Herramienta.PERA;
        this.etiquetaHerramientaActual.setText("Ventana Principal: " + this.herramientaActual);
    }//GEN-LAST:event_botonPeraActionPerformed

    private void setOpcionesDefault() {
        this.botonLapiz.setSelected(true);       
        this.botonLinea.setSelected(false);
        this.botonRectangulo.setSelected(false);
        this.botonOvalo.setSelected(false);
        this.botonPera.setSelected(false);
        this.herramientaActual = Herramienta.LAPIZ;
        
        this.botonAlisar.setSelected(false);
        this.botonEditar.setSelected(false);
        this.botonRelleno.setSelected(false);
        this.botonTransparencia.setSelected(false);
        this.botonGrosor.setValue(1);
    }
    
    private void botonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenoActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setRelleno(this.botonRelleno.isSelected());        
    }//GEN-LAST:event_botonRellenoActionPerformed

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        VentanaInterna vi = (VentanaInterna)this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setEditar(this.botonEditar.isSelected());
    }//GEN-LAST:event_botonEditarActionPerformed

    private void colorNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorNegroActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setColor(Color.BLACK);
    }//GEN-LAST:event_colorNegroActionPerformed

    private void colorBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBlancoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setColor(Color.WHITE);
    }//GEN-LAST:event_colorBlancoActionPerformed

    private void colorAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAmarilloActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setColor(Color.YELLOW);
    }//GEN-LAST:event_colorAmarilloActionPerformed

    private void colorRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRojoActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setColor(Color.RED);
    }//GEN-LAST:event_colorRojoActionPerformed

    private void colorVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorVerdeActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setColor(Color.GREEN);
    }//GEN-LAST:event_colorVerdeActionPerformed

    private void colorAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAzulActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setColor(Color.BLUE);
    }//GEN-LAST:event_colorAzulActionPerformed

    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setAlisar(this.botonAlisar.isSelected());
        vi.getLienzo2D().setAtributos();
    }//GEN-LAST:event_botonAlisarActionPerformed

    private void botonGrosorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonGrosorMouseClicked
        //System.out.println("Grosor modificado");
    }//GEN-LAST:event_botonGrosorMouseClicked

    private void botonGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_botonGrosorStateChanged
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        vi.getLienzo2D().setGrosor((int)this.botonGrosor.getValue());
        vi.getLienzo2D().setAtributos();
        System.out.println("Grosor: " + this.botonGrosor.getValue());
    }//GEN-LAST:event_botonGrosorStateChanged

    private void abrirDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirDibujoActionPerformed
        JFileChooser dlg = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg", "png");
        dlg.addChoosableFileFilter(filter);
        int resp = dlg.showOpenDialog(this);
        
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                
                //Creo una imagen con canal alfa con las dimensiones de las que he elegido
                BufferedImage imgAlfa = new BufferedImage(img.getWidth(), img.getHeight(), BufferedImage.TYPE_INT_ARGB);
                Graphics g = imgAlfa.getGraphics();
                
                VentanaInterna vi = new VentanaInterna();
                this.escritorio.add(vi);
                vi.setVisible(true);
                vi.addInternalFrameListener(new ManejadorVentanaInterna());
                vi.getLienzo2D().setFondo(img);
                vi.setTitle(f.getName());
                this.setOpcionesDefault();
                
                vi.getLienzo2D().paint(g);
                
                vi.getLienzo2D().addMouseMotionListener(new MouseMotionAdapter() {
                    @Override
                    public void mouseMoved(MouseEvent me) {
                        puntero.x = me.getX();
                        puntero.y = me.getY();
                        coordenadasPuntero.setText("Coordenadas del puntero: (" + puntero.x + ", " + puntero.y + ")");
                    }
                });
            }
            catch(Exception e) {
                //Creamos una ventana de di√°logo  donde indicamos el error
                JDialog aviso = new JDialog(new JFrame(),"ERROR AL ABRIR");
                JLabel l = new JLabel("El archivo seleccionado no es v√°lido.");
                aviso.add(l);
                aviso.setSize(500, 200);
                aviso.setVisible(true);
                System.err.println("Error al leer la imagen");
            }
        }
        
    }//GEN-LAST:event_abrirDibujoActionPerformed

    private void verBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraEstadoActionPerformed
        this.barraEstado.setVisible(this.verBarraEstado.isSelected());
    }//GEN-LAST:event_verBarraEstadoActionPerformed

    private void verBarraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraAtributosActionPerformed
        this.barraAtributos.setVisible(this.verBarraAtributos.isSelected());
    }//GEN-LAST:event_verBarraAtributosActionPerformed

    private void verBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraFormasActionPerformed
        this.barraFormas.setVisible(this.verBarraFormas.isSelected());
    }//GEN-LAST:event_verBarraFormasActionPerformed

    private void recaleOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recaleOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo(false);
            if (img != null) {
                try {
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null); //(contraste, brillo, renderizado)
                    rop.filter(img, img); //(src, dst) Sobreescribimos la propia imagen
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_recaleOpActionPerformed

    private void convolveOpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolveOpActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo(false);
            if (img != null) {
                try {
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    
                    BufferedImage imgaux = cop.filter(img, null);
                    vi.getLienzo2D().setFondo(imgaux);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_convolveOpActionPerformed

    private void deslizadorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deslizadorFocusGained
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
                
        //Copio la imagen tal cual
        ColorModel cm = vi.getLienzo2D().getFondo(false).getColorModel();
        WritableRaster raster = vi.getLienzo2D().getFondo(false).copyData(null);
        boolean alfaPre = vi.getLienzo2D().getFondo(false).isAlphaPremultiplied();
        this.imagenOriginal = new BufferedImage(cm, raster, alfaPre, null);
        
        //Paso los gr√°ficos de la imagen inicio
//        Graphics2D g2d = this.imagenOriginal.createGraphics();
        
        //Pinto sobre los gr√°ficos de la imagen inicio
 //       vi.getLienzo2D().paint(g2d);
        
        System.out.println("He pintado en la imagen");
        //Borrar vector de figuras
    }//GEN-LAST:event_deslizadorFocusGained

    private void deslizadorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deslizadorFocusLost
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        //Graphics2D g2dImagen = this.imagenOriginal.createGraphics();
        //vi.getLienzo2D().paint(g2dImagen);
        this.imagenOriginal = null;
        this.deslizador.setValue(0);
        System.out.println("Deslizador reseteado");
    }//GEN-LAST:event_deslizadorFocusLost

    private void deslizadorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_deslizadorStateChanged
        //Cada vez que se mueve el deslizador
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        float offset[], factor[];
        if (vi != null && this.imagenOriginal != null) {           
            System.out.println("Tipo de imagen: " + this.imagenOriginal.getType());
            
            if (this.imagenOriginal.getColorModel().hasAlpha()){ //Tipos con canal alfa
                System.out.println("Canal alfa");
                offset = new float[4];// = {this.deslizador.getValue()-50, this.deslizador.getValue()-50, this.deslizador.getValue()-50, 0};
                factor = new float[4];



                offset[3] = 0;
                factor[3] = 1.0F;
            }
            else{ // Si no tienen alfa
                    offset = new float[3];
                    factor = new float[3];             
            }
            
            for (int i = 0; i < 3; i++) {
                offset[i] = this.deslizador.getValue()*(float)4 - 200;
                factor[i] = 1.0F;
            }
            
            RescaleOp rop = new RescaleOp(factor, offset, null); //(contraste, brillo, renderizado)
            
            BufferedImage aux = rop.filter(this.imagenOriginal, null);            
            vi.getLienzo2D().setFondo(aux);
            vi.getLienzo2D().repaint();
           
            System.out.println("Brillo: " + this.deslizador.getValue());
        }
    }//GEN-LAST:event_deslizadorStateChanged

    private void listaFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaFiltrosActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getFondo(true);
            Kernel k;
            k = this.getKernel(this.listaFiltros.getSelectedIndex());
            
            if (img != null && k != null) {
                try {
                    ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);                   
                    BufferedImage imgaux = cop.filter(img, null);
                    vi.getLienzo2D().setFondo(imgaux);
                    vi.getLienzo2D().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_listaFiltrosActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        this.nuevaVentanaActionPerformed(evt);
    }//GEN-LAST:event_nuevoActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        this.abrirDibujoActionPerformed(evt);
    }//GEN-LAST:event_abrirActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        this.guardarDibujoActionPerformed(evt);
    }//GEN-LAST:event_guardarActionPerformed

    private void listaColoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaColoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listaColoresActionPerformed

    private void escritorioMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_escritorioMouseMoved

    }//GEN-LAST:event_escritorioMouseMoved

    private void rellenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenarActionPerformed
        this.rellenoSelected = !this.rellenoSelected; //No funciona la detecci√≥n de las posiciones de este bot√≥n
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        this.rellenar.setSelected(this.rellenoSelected);
        
        if (vi != null) {
            vi.getLienzo2D().setRelleno(this.rellenoSelected);
        }
       
       
    }//GEN-LAST:event_rellenarActionPerformed

    private void transparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaActionPerformed
        this.transparenciaSelected = !this.transparenciaSelected;
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        this.transparencia.setSelected(this.transparenciaSelected);
        
        if (vi != null) {
            vi.getLienzo2D().setTransparencia(this.transparenciaSelected);
            vi.getLienzo2D().setAtributos();
        }
    }//GEN-LAST:event_transparenciaActionPerformed

    private void alisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisarActionPerformed
        this.alisarSelected = !this.alisarSelected;
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        this.alisar.setSelected(this.alisarSelected);
        
        if (vi != null) {
            vi.getLienzo2D().setAlisar(this.alisarSelected);
            vi.getLienzo2D().setAtributos();
        }
    }//GEN-LAST:event_alisarActionPerformed

    private void editarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarActionPerformed
        this.seleccionarSelected = !this.seleccionarSelected;
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        this.editar.setSelected(this.seleccionarSelected);
        
        if (vi != null) {
            vi.getLienzo2D().setEditar(this.seleccionarSelected);
        }
    }//GEN-LAST:event_editarActionPerformed

    private Kernel getKernel(int seleccion) {
        Kernel k = null;
        switch(seleccion) {
            case 0:
                //float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f, 0.1f, 0.1f, 0.1f};
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
            case 1:
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case 2:
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
            case 3:
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case 4:
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
        }
        
        return k;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    
    private class ManejadorVentanaInterna extends InternalFrameAdapter {
        @Override
        public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            System.out.println("Ventana seleccionada");
            VentanaInterna vi = (VentanaInterna) escritorio.getSelectedFrame();
            
            //Obtenemos las opciones seleccionadas
            botonRelleno.setSelected(vi.getLienzo2D().isRelleno());
            botonAlisar.setSelected(vi.getLienzo2D().isAlisar());
            botonEditar.setSelected(vi.getLienzo2D().isEditar());
            botonTransparencia.setSelected(vi.getLienzo2D().isTransparencia());
            
            System.out.println("Herramienta de esta ventana = " + vi.getLienzo2D().getHerramienta());
            //Obtenemos las herramientas en uso en la ventana interna
            botonLapiz.setSelected(Herramienta.LAPIZ.equals(vi.getLienzo2D().getHerramienta()));
            botonLinea.setSelected(Herramienta.LINEA.equals(vi.getLienzo2D().getHerramienta()));
            botonRectangulo.setSelected(Herramienta.RECTANGULO.equals(vi.getLienzo2D().getHerramienta()));
            botonOvalo.setSelected(Herramienta.OVALO.equals(vi.getLienzo2D().getHerramienta()));
            botonPera.setSelected(Herramienta.PERA.equals(vi.getLienzo2D().getHerramienta()));
            
            botonGrosor.setValue(vi.getLienzo2D().getGrosor());
        }
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelCentral;
    private javax.swing.JButton abrir;
    private javax.swing.JMenuItem abrirDibujo;
    private javax.swing.JToggleButton alisar;
    private javax.swing.JMenu archivo;
    private javax.swing.JPanel barraAtributos;
    private javax.swing.JPanel barraEstado;
    private javax.swing.JToolBar barraFormas;
    private javax.swing.JCheckBox botonAlisar;
    private javax.swing.JCheckBox botonEditar;
    private javax.swing.JSpinner botonGrosor;
    private javax.swing.JToggleButton botonLapiz;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JToggleButton botonOvalo;
    private javax.swing.JToggleButton botonPera;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JCheckBox botonRelleno;
    private javax.swing.JCheckBox botonTransparencia;
    private javax.swing.JButton colorAmarillo;
    private javax.swing.JButton colorAzul;
    private javax.swing.JButton colorBlanco;
    private javax.swing.JButton colorNegro;
    private javax.swing.JButton colorRojo;
    private javax.swing.JButton colorVerde;
    private javax.swing.JMenuItem convolveOp;
    private javax.swing.JLabel coordenadasPuntero;
    private javax.swing.JSlider deslizador;
    private javax.swing.JMenu edicion;
    private javax.swing.JToggleButton editar;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel etiquetaHerramientaActual;
    private javax.swing.JButton guardar;
    private javax.swing.JMenuItem guardarDibujo;
    private javax.swing.JMenu imagen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JComboBox<Color> listaColores;
    private javax.swing.JComboBox<String> listaFiltros;
    private javax.swing.JMenuItem nuevaVentana;
    private javax.swing.JButton nuevo;
    private javax.swing.JMenuItem recaleOp;
    private javax.swing.JToggleButton rellenar;
    private javax.swing.JToggleButton transparencia;
    private javax.swing.JCheckBoxMenuItem verBarraAtributos;
    private javax.swing.JCheckBoxMenuItem verBarraEstado;
    private javax.swing.JCheckBoxMenuItem verBarraFormas;
    // End of variables declaration//GEN-END:variables
}
