/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aplicacionsmm;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.math.*;
import java.util.ArrayList;

/**
 *
 * @author pablo
 */
public class Lienzo extends javax.swing.JPanel {
    private Color color = Color.black;
    private boolean relleno;
    private boolean editar;
    private Point p = new Point (-10, -10);
    private Point p2 = new Point (-10, -10);
    private Herramienta herramienta = Herramienta.LAPIZ; //Por defecto, lápiz
    private ArrayList<Figura> figuras;
    private Figura figuraActual;
    
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
        this.figuras = new ArrayList();
        this.figuraActual = new Figura();
        this.relleno = false;
        this.editar = false;
    }
    
    @Override
    public void paint(Graphics g) {
        //Se sobrecarga
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;
        //Usar switch o if-else para comparar con el enumerado la herramienta que esté activa
        //Consultar si está seleccionado el relleno o no
        //g2d.setColor(this.color);
        
        for (Figura f: this.figuras) {
            g2d.setColor(f.getColor());
            if (f.isRelleno()) {
                g2d.fill(f.getFigura());
            }
            else {
                g2d.draw(f.getFigura());
            }
        }
        
        /*switch(this.herramienta){
            case LAPIZ: //dibujamos puntos
                g.fillOval(p.x-15, p.y-15, 20, 20);
                break;
            case LINEA:
                g.drawLine(p.x, p.y, p2.x, p2.y);
                break;
            case RECTANGULO:
                if (isRelleno())
                    g.fillRect(Math.min(p.x, p2.x), Math.min(p.y, p2.y), Math.abs(p2.x - p.x), Math.abs(p2.y-p.y));
                else
                    g.drawRect(Math.min(p.x, p2.x), Math.min(p.y, p2.y), Math.abs(p2.x - p.x), Math.abs(p2.y-p.y));
                break;
            case OVALO:
                if (isRelleno())
                    g.fillOval(Math.min(p.x, p2.x), Math.min(p.y, p2.y), Math.abs(p2.x - p.x), Math.abs(p2.y-p.y));
                else
                    g.drawOval(Math.min(p.x, p2.x), Math.min(p.y, p2.y), Math.abs(p2.x - p.x), Math.abs(p2.y-p.y));
                break;
        }*/
        
        
        System.out.println("Herramienta: " + this.getHerramienta());
        //g.drawLine(20, 20, 200, 200);
        //g.fillOval(p.x-15, p.y-15, 20, 20);
        
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public boolean isRelleno() {
        return relleno;
    }
    

    public void setRelleno(boolean marcado) {
        this.relleno = marcado;
    }
    
    public boolean isEditar() {
        return this.editar;
    }
    
    public void setEditar(boolean e) {
        this.editar = e;
    }

    public Point getP() {
        return p;
    }

    public void setP(Point p) {
        this.p = p;
    }
    
    public void setP2(Point p) {
        this.p2 = p;
    }
    
    public Point getP2(Point p) {
        return this.p2;
    }
    
    public void setHerramienta(Herramienta h) {
        this.herramienta = h;
    }
    
    public Herramienta getHerramienta() {
        return this.herramienta;
    }
    
    public Figura getFiguraSeleccionada(Point paux) {
        for (Figura f: figuras) {
            if (f.contains(paux)) {
                System.out.println("Figura seleccionada: " + f.getTipo()); //Comprobando que detecta
                return f;
            }
        }
        
        return null;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (this.herramienta == Herramienta.LAPIZ) {
            p = evt.getPoint();
            this.repaint();
        }        
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        p = evt.getPoint();
        
        if (this.isEditar()) {
            this.figuraActual = this.getFiguraSeleccionada(p); //Obtenemos la figura que seleccionamos
        }
        else {
            switch(this.herramienta) {
                case LAPIZ:
                    Ellipse2D.Float punto = new Ellipse2D.Float(p.x, p.y, 5, 5);
                    //this.figuraActual = new Figura(punto, true, Tipo.PUNTO);
                    this.figuras.add(new Figura(punto, true, Tipo.PUNTO, this.getColor()));
                    break;
                case LINEA:
                    Line2D linea = new Line2D.Float(p, p);
                    //this.figuraActual = new Figura(linea, false, Tipo.LINEA);
                    this.figuras.add(new Figura(linea, false, Tipo.LINEA, this.getColor()));
                    break;
                case RECTANGULO:
                    Rectangle rec = new Rectangle(p.x, p.y, 0, 0);
                    //this.figuraActual = new Figura(rec, this.isRelleno(), Tipo.RECTANGULO);
                    this.figuras.add(new Figura(rec, this.isRelleno(), Tipo.RECTANGULO, this.getColor()));
                    break;
                case OVALO:
                    Ovalo ovalo = new Ovalo(p.x, p.y, 0, 0);
                    //this.figuraActual = new Figura(ovalo, this.isRelleno(), Tipo.OVALO);
                    this.figuras.add(new Figura(ovalo, this.isRelleno(), Tipo.OVALO, this.getColor()));
                    break;
            }
        }
        
        //p2 = p;
        this.repaint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        /*p2 = evt.getPoint();
        this.repaint();*/
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        p2 = evt.getPoint();
        
        if (this.isEditar()) {
            //Ahora movemos la figura seleccionada
            if (this.figuraActual != null){
                this.figuraActual.setLocation(p2);
                System.out.println("Moviendo una figura de tipo " + this.figuraActual.getTipo()); //Comprobar que la detecta
            }
        }
        else {
            this.figuraActual = this.figuras.get(this.figuras.size()-1);
            switch (this.figuraActual.getTipo()) {
                case LINEA:
                    Line2D linea = (Line2D) this.figuraActual.getFigura();
                    linea.setLine(p, p2);
                    break;
                case RECTANGULO:
                    Rectangle rec = (Rectangle) this.figuraActual.getFigura();
                    rec.setFrameFromDiagonal(p, p2);
                    break;
                case OVALO:
                    Ovalo ovalo = (Ovalo) this.figuraActual.getFigura();
                    ovalo.setFrameFromDiagonal(p, p2);
                    break;
            }
        }
        
        this.repaint();
    }//GEN-LAST:event_formMouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
